-- ALL PRODECURES FOR DATA ANALYSIS WILL BE SIMILAR TO THIS

DROP PROCEDURE IF EXISTS igs_gc;
DELIMITER //
CREATE PROCEDURE igs_gc(IN a_id VARCHAR(30))  -- accession id
BEGIN
	DECLARE seq LONGTEXT;
	DECLARE id VARCHAR(45);
    DECLARE done BOOL DEFAULT false;
	DECLARE gc_cursor CURSOR FOR 
	SELECT intergenic_seq.accession_id, (SELECT SUBSTR(chromosomes.chrom_seq, igs_seq_start, (SELECT igs_seq_end - igs_seq_start FROM chromosomes LIMIT 1))) AS seq FROM intergenic_seq
	JOIN chromosomes on chromosomes.chrom_id = intergenic_seq.chrom_id
    WHERE intergenic_seq.accession_id = a_id
    ;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;
    DROP TEMPORARY TABLE IF EXISTS igs_analysis;
    CREATE TEMPORARY TABLE igs_analysis (seq_len INT UNSIGNED, GCcontent FLOAT);
	OPEN gc_cursor;
    
    content: LOOP
        FETCH gc_cursor INTO id, seq;
		IF done = true THEN 
			LEAVE content;
		END IF;
        SET @seq_len = char_length(seq);
        SET @seq_N = (@seq_len - char_length(REPLACE(seq, 'N', ''))) / @seq_len;
        SET @seq_G = @seq_len - char_length(REPLACE(seq, 'G', ''));
        SET @seq_C = @seq_len - char_length(REPLACE(seq, 'C', ''));
		   SET @gc = (@seq_G + @seq_C) / (@seq_len - @seq_N);
        IF @seq_N < .5 THEN
             INSERT INTO igs_analysis(seq_len, GCcontent) VALUES (@seq_len, @gc);
 	   END IF;
	END LOOP;
CLOSE gc_cursor;
END //
DELIMITER ;

-- call igs_gc;
